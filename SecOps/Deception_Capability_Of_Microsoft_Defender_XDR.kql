//=============================================================================
// Deception capability of Microsoft Defender XDR
// Purpose: Severity Scoring, MITRE TTP Mapping, and OOB Analytics Validation
// Last Updated: 2025-02-10
// Author: Sameer P Sheik
//=============================================================================
// 1. SEVERITY SCORING FRAMEWORK
//=============================================================================
// Base Severity Scores:
//=============================================================================
// Critical (8-10):
//*****************************************************************************
// - T1204.001 (User Execution: Malicious Link) = 8
//   Rationale: Direct user interaction with malicious content
// - T1055 (Process Injection) = 8
//   Rationale: Advanced malware technique with high impact
// - Multiple TTPs detected simultaneously = +1 to base score (max 10)
//   Rationale: Complex attack chains indicate sophisticated threats
//=============================================================================
// High (6-7):
//*****************************************************************************
// - T1566 (Phishing) = 7
//   Rationale: Common initial access vector
// - T1027 (Obfuscation) = 7
//   Rationale: Indicates evasion attempt
// - Machine entities with "Impacted" role = 6
//   Rationale: Direct system compromise
//=============================================================================
// Medium (4-5):
//*****************************************************************************
// - File entities with "Related" role = 4
//   Rationale: Potential artifact of malicious activity
// - T1083 (File and Directory Discovery) = 5
//   Rationale: Reconnaissance activity
//=============================================================================
// Low (1-3):
//*****************************************************************************
// - URL entities with "Related" role = 3
//   Rationale: Indirect indicators
// - Default score = 2
//   Rationale: Baseline for unclassified alerts
//=============================================================================
// 2. MITRE ATT&CK MAPPING
//=============================================================================
// Initial Access:
//*****************************************************************************
// - T1566 (Phishing)
//   Coverage: Email links, attachments, and spearphishing attempts
//   Related Rules: Email.SecurityAlert, Network.SuspiciousURL
//=============================================================================
// Execution:
//*****************************************************************************
// - T1204.001 (User Execution: Malicious Link)
//   Coverage: User interaction with malicious content
//   Related Rules: Endpoint.ProcessCreate, File.Download
//=============================================================================
// Privilege Escalation:
//*****************************************************************************
// - T1055 (Process Injection)
//   Coverage: Memory injection, DLL injection
//   Related Rules: Endpoint.ProcessAccess, Memory.Injection
//=============================================================================
// Defense Evasion:
//*****************************************************************************
// - T1027 (Obfuscated Files or Information)
//   Coverage: Encoded payloads, packed files
//   Related Rules: File.Suspicious, Process.CommandLine
//=============================================================================
// Discovery:
//*****************************************************************************
// - T1083 (File and Directory Discovery)
//   Coverage: Suspicious file system enumeration
//   Related Rules: Process.FileSystem, Command.Discovery
//=============================================================================
// Command and Control:
//*****************************************************************************
// - T1071 (Standard Application Layer Protocol)
//   Coverage: Suspicious network communications
//   Related Rules: Network.Connection, DNS.Query
//=============================================================================
// 3. OOB ANALYTICS VALIDATION
//=============================================================================
// Existing OOB Coverage:
//*****************************************************************************
// 1. SecurityAlert
//    - Provides baseline detection for known threats
//    - Covers standard attack patterns
//    - Limitation: May miss complex attack chains
//=============================================================================
// 2. SecurityIncident:
//*****************************************************************************
//    - Correlates related alerts
//    - Provides incident context
//    - Limitation: Manual correlation required
//=============================================================================
// Complementarity Analysis:
//*****************************************************************************
// 1. Enhanced Detection Areas:
//    - Multi-TTP correlation
//    - Advanced severity scoring
//    - Tactical context integration
//=============================================================================
// 2. Coverage Gaps Addressed:
//*****************************************************************************
//    - Complex attack chain detection
//    - Context-aware severity scoring
//    - Tactical relationship mapping
//=============================================================================
// 3. False Positive Reduction:
//*****************************************************************************
//    - Multi-factor severity scoring
//    - Context-based escalation
//    - Evidence role consideration
//=============================================================================
// 4. VALIDATION CHECKS
//=============================================================================
// Required Validation Steps:
//=============================================================================
// 1. Compare against OOB SecurityAlert:
//    - Check for duplicate detections
//    - Validate severity alignment
//    - Confirm complementary coverage
//=============================================================================
// 2. Performance Impact:
//=============================================================================
//    - Monitor query execution time
//    - Check resource utilization
//    - Validate data volume handling
//=============================================================================
// 3. Detection Accuracy:
//=============================================================================
//    - Test against known scenarios
//    - Validate false positive rates
//    - Check detection completeness
//=============================================================================
// 4. Integration Points:
//=============================================================================
//    - Verify MITRE TTP mapping accuracy
//    - Validate severity scoring logic
//    - Check evidence correlation
//=============================================================================
// 5. MAINTENANCE AND UPDATES
//=============================================================================
// Regular Updates Required:
// 1. MITRE TTP Mappings:
//    - Update technique descriptions
//    - Add new techniques as released
//    - Revise severity scores based on threat landscape
//=============================================================================
// 2. Severity Scoring:
//=============================================================================
//    - Review and adjust thresholds
//    - Update scoring logic based on new threats
//    - Calibrate multi-factor scoring
//=============================================================================
// 3. OOB Analytics Sync:
//=============================================================================
//    - Monitor for new OOB detections
//    - Update complementarity checks
//    - Revise coverage analysis
//=============================================================================
//=============================================================================
// END OF DOCUMENTATION
//=============================================================================
let Timeframe = 30d;
// Severity scoring function
let SeverityScore = (attackTechnique:string, entityType:string, evidenceRole:string) {
    case(
        attackTechnique has "T1204.001", 8,  // User Execution: Malicious Link
        attackTechnique has "T1566", 7,      // Phishing
        entityType == "Machine" and evidenceRole == "Impacted", 6,
        entityType == "File" and evidenceRole == "Related", 4,
        entityType == "Url" and evidenceRole == "Related", 3,
        2
    )
};
// Enhanced analytics with better array handling
AlertEvidence
| where TimeGenerated > ago(Timeframe)
| extend 
    ParsedFields = parse_json(AdditionalFields),
    AlertType = case(
        Categories has "Malware", "Malware",
        Categories has "SuspiciousActivity", "Suspicious Activity",
        "Other"
    )
| extend 
    Hostname = tostring(ParsedFields.HostName),
    Directory = tostring(ParsedFields.Directory),
    RemediationAction = tostring(ParsedFields.RemediationProvided),
    // Clean up AttackTechniques parsing
    CleanAttackTechniques = parse_json(tostring(AttackTechniques))
| extend ThreatScore = SeverityScore(tostring(CleanAttackTechniques), EntityType, EvidenceRole)
| summarize 
    AlertCount = count(),
    FirstSeen = min(TimeGenerated),
    LastSeen = max(TimeGenerated),
    UniqueDevices = dcount(DeviceId),
    DevicesList = make_set(DeviceName, 100),
    AttackTechniques = array_sort_asc(make_set(CleanAttackTechniques, 100)),
    AffectedFiles = array_sort_asc(make_set(iff(isempty(FileName), "", FileName), 100)),
    IPAddresses = array_sort_asc(make_set(LocalIP, 100)),
    FileHashes = array_sort_asc(make_set(iff(isempty(SHA256), "", SHA256), 100)),
    MaxThreatScore = max(ThreatScore),
    ExecutionPaths = array_sort_asc(make_set(iff(isempty(Directory), "", Directory), 100)),
    AffectedHosts = array_sort_asc(make_set(Hostname, 100))
    by AlertType, Title, ServiceSource, DetectionSource, EntityType, EvidenceRole
| extend
    // Improved array handling
    UniqueIPCount = array_length(IPAddresses),
    UniqueFileCount = array_length(AffectedFiles),
    RiskLevel = case(
        MaxThreatScore >= 8, "Critical",
        MaxThreatScore >= 6, "High",
        MaxThreatScore >= 4, "Medium",
        "Low"
    )
| extend 
    // Additional metrics
    HasNetworkActivity = UniqueIPCount > 0,
    HasFileActivity = UniqueFileCount > 0,
    ImpactedDeviceCount = array_length(DevicesList),
    TotalPaths = array_length(ExecutionPaths)
| project 
    AlertType,
    Title,
    RiskLevel,
    AlertCount,
    UniqueDevices,
    ImpactedDeviceCount,
    HasNetworkActivity,
    HasFileActivity,
    FirstSeen,
    LastSeen,
    ServiceSource,
    DetectionSource,
    EntityType,
    EvidenceRole,
    AttackTechniques,
    DevicesList,
    AffectedFiles,
    IPAddresses,
    FileHashes,
    ExecutionPaths,
    AffectedHosts,
    MaxThreatScore,
    TotalPaths
| sort by MaxThreatScore desc, AlertCount desc, LastSeen desc