//=============================================================================
// Title: Enhanced Privileged Account Usage Analysis
// Purpose: Monitor and detect suspicious privileged account activities
// Author: Sameer P Sheik
// Last Updated: 2024-01-30
//=============================================================================
// SEVERITY: Medium to High
// Initial severity is Medium, elevates to High when:
// - Multiple high-risk privileges are used by non-admin accounts
// - New accounts are detected with privileged access
// - Unusual access patterns are detected across multiple systems
//
// MITRE ATT&CK MAPPING:
// - Tactic: Privilege Escalation (TA0004)
//   * Technique: Access Token Manipulation (T1134)
//   * Technique: Valid Accounts - Local Accounts (T1078.003)
// - Tactic: Defense Evasion (TA0005)
//   * Technique: Access Token Manipulation (T1134)
// - Tactic: Discovery (TA0007)
//   * Technique: Permission Groups Discovery (T1069)
//
// RELATED MICROSOFT SENTINEL RULES:
// - "Account with High Privileges Created" (Built-in)
// - "Suspicious number of resource creation or deployment activities" (Built-in)
// - "Hidden Account Discovery" (Built-in)
//
// COMPLEMENTARY COVERAGE:
// This rule enhances existing detections by:
// 1. Adding risk-based scoring for privilege usage
// 2. Tracking privilege usage patterns over time
// 3. Monitoring cross-system privilege usage
// 4. Detecting unusual patterns in privileged access
// 5. Identifying new accounts with immediate privileged access
//
// FALSE POSITIVE SCENARIOS:
// 1. IT administrators performing routine maintenance
// 2. Automated service accounts with legitimate high privileges
// 3. Scheduled tasks running with elevated privileges
// 4. Backup operations requiring system privileges
//
// VALIDATION REQUIREMENTS:
// 1. Validate against known admin account list
// 2. Compare with existing privilege monitoring rules
// 3. Test against known good administrative behavior
// 4. Verify privilege categorization accuracy
//
// PERFORMANCE CONSIDERATIONS:
// - Query uses summarize operations - monitor resource usage
// - Adjust TimeRange based on environment size
// - Consider adjusting thresholds based on baseline
//=============================================================================
let PrivilegeThreshold = 50; // Adjust threshold for high privilege usage alert
let NewAccountThreshold = 7d; // Threshold for new account detection
let TimeRange = 30d; // Adjustable time window
let KnownAdminAccounts = dynamic(["admin", "administrator"]); // Add your known admin accounts
let MainQuery = 
SecurityEvent
| where TimeGenerated > ago(TimeRange)
| where EventID == 4672
| where 
    Account !has "NT AUTHORITY\\SYSTEM" and 
    Account !has "Window Manager" and
    Account !has "LOCAL SERVICE" and
    Account !has "NETWORK SERVICE" and
    Account !has "UMFD-" and            
    Account !has "DWM-"                 
| where AccountType =~ "User"
| extend 
    DomainName = tostring(split(Account, "\\")[0]),
    UserName = tolower(tostring(split(Account, "\\")[1])),
    EventTime = TimeGenerated
| extend 
    IsKnownAdmin = UserName in (KnownAdminAccounts),
    ComputerName = tolower(Computer)
| extend Privs = extract_all(@"Se(.*?)Privilege", PrivilegeList)
| mv-expand Privs
| extend Privilege = strcat('Se', Privs, 'Privilege')
| extend PrivilegeRiskLevel = case(
    // High-Risk Privileges (MITRE: T1134 - Access Token Manipulation)
    Privilege has "SeDebugPrivilege" or 
    Privilege has "SeTakeOwnershipPrivilege" or 
    Privilege has "SeBackupPrivilege" or 
    Privilege has "SeRestorePrivilege", "High",
    // Medium-Risk Privileges (MITRE: T1069 - Permission Groups Discovery)
    Privilege has "SeSecurityPrivilege" or 
    Privilege has "SeSystemEnvironmentPrivilege", "Medium",
    "Low");
MainQuery
| summarize 
    ['List of Privileges'] = make_set(Privilege),
    ['High Risk Privileges'] = make_set_if(Privilege, PrivilegeRiskLevel == "High"),
    ['First Seen'] = min(EventTime),
    ['Last Seen'] = max(EventTime),
    ['Total Occurrences'] = count(),
    ['Unique Days Active'] = dcount(startofday(EventTime)),
    ['Computers Accessed'] = make_set(ComputerName),
    ['Computer Count'] = dcount(ComputerName)
    by Account, DomainName, UserName, IsKnownAdmin
| extend 
    ['Duration (Days)'] = datetime_diff('day', ['Last Seen'], ['First Seen']),
    ['Daily Usage Rate'] = round(['Total Occurrences'] * 1.0 / ['Unique Days Active'], 2),
    ['Is New Account'] = ['First Seen'] > ago(NewAccountThreshold),
    ['Multiple Computer Access'] = array_length(['Computers Accessed']) > 1,
    // Convert dynamic arrays to strings for later grouping
    ['Computers Accessed String'] = strcat_array(['Computers Accessed'], ", "),
    ['List of Privileges String'] = strcat_array(['List of Privileges'], ", "),
    ['High Risk Privileges String'] = strcat_array(['High Risk Privileges'], ", ")
| extend 
    // Risk Indicators with MITRE mapping
    RiskIndicators = pack_array(
    iff(['Total Occurrences'] > PrivilegeThreshold, "High Privilege Usage (T1134)", ""),
    iff(['Is New Account'], "New Account with Privileges (T1078.003)", ""),
    iff(['Multiple Computer Access'], "Multiple Computer Access (T1078)", ""),
    iff(not(IsKnownAdmin) and array_length(['High Risk Privileges']) > 0, "Unexpected High Risk Privileges (T1134)", "")
)
| mv-expand RiskIndicators to typeof(string)
| where isnotempty(RiskIndicators)
| summarize RiskIndicators = make_set(RiskIndicators) by 
    Account,
    DomainName,
    UserName,
    IsKnownAdmin,
    ['First Seen'],
    ['Last Seen'],
    ['Duration (Days)'],
    ['Total Occurrences'],
    ['Unique Days Active'],
    ['Daily Usage Rate'],
    ['Computer Count'],
    ['Computers Accessed String'],
    ['List of Privileges String'],
    ['High Risk Privileges String']
| extend 
    ['Risk Score'] = array_length(RiskIndicators),
    // Dynamic Severity Assignment
    Severity = case(
        array_length(RiskIndicators) >= 3, "High",
        array_length(RiskIndicators) >= 2, "Medium",
        "Low"
    )
| project
    Severity,
    Account,
    DomainName,
    UserName,
    ['Is Known Admin'] = IsKnownAdmin,
    ['List of Privileges'] = ['List of Privileges String'],
    ['High Risk Privileges'] = ['High Risk Privileges String'],
    ['First Seen'],
    ['Last Seen'],
    ['Duration (Days)'],
    ['Total Occurrences'],
    ['Unique Days Active'],
    ['Daily Usage Rate'],
    ['Computer Count'],
    ['Computers Accessed'] = ['Computers Accessed String'],
    ['Risk Indicators'] = RiskIndicators,
    ['Risk Score']
| sort by ['Risk Score'] desc, ['Total Occurrences'] desc