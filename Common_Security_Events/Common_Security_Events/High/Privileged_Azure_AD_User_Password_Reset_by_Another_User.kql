//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Title: Privileged Azure AD User Password Reset by Another User
// Author: Sameer P Sheik
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Description:
// Detects when a user with privileged Azure AD roles has their on-premises Active Directory 
// password changed by someone other than themselves.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Severity: High
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MITRE ATT&CK Tactics & Techniques:
// - Tactic: Credential Access (TA0006)
//   - Technique: Account Manipulation (T1098)
//   - Sub-technique: Additional Cloud Credentials (T1098.001)
// - Tactic: Persistence (TA0003)
//   - Technique: Account Manipulation (T1098)
// - Tactic: Privilege Escalation (TA0004)
//   - Technique: Valid Accounts (T1078)
//   - Sub-technique: Cloud Accounts (T1078.004)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Risk Scoring Factors:
// - Non-business hours activity (+40)
// - Non-domain workstation (+30)
// - Multiple password changes in history (+20)
// - Multiple distinct login locations (+20)
// - High number of failed logins (+30)
// - Related suspicious events (+20)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Data Sources:
// - Windows Security Events (Event ID 4724)
// - Azure AD Identity Info
// - Azure AD Sign-in Logs
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Alert Validation:
// - True Positive Conditions:
//   * Password reset outside business hours
//   * Multiple failed login attempts before reset
//   * Reset from unusual workstation
//   * Multiple password changes in short period
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// - False Positive Scenarios:
//   * Help desk password resets (validate against ticketing system)
//   * Scheduled password resets by management tools
//   * Break-glass account usage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Complementarity Analysis:
// - Microsoft Defender for Cloud Apps:
//   * Complements "Unusual administrative activity" alert
//   * Adds on-premises AD context to cloud-only monitoring
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// - Microsoft Sentinel Built-in Analytics:
//   * Complements "Suspicious service principal activity" rule
//   * Extends "Account password reset attempt" with privilege context
//   * More granular than "Multiple password reset failures" rule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Version: 1.1
// Last Updated: 2025-01-31
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
SecurityEvent
| where TimeGenerated > ago(360d)
| where EventID == "4724"
| extend Hour = datetime_part("hour", TimeGenerated)
| project
    TimeGenerated,
    Activity,
    SubjectAccount,
    TargetAccount,
    TargetSid,
    SubjectUserSid,
    SubjectDomainName,
    WorkstationName,
    Hour
| join kind=inner (
    IdentityInfo
    | where TimeGenerated > ago(360d)
    | where isnotempty(AssignedRoles) and AssignedRoles != "[]"
    | summarize arg_max(TimeGenerated, *) by AccountUPN
    | project AccountUPN, AccountName, AccountSID, AssignedRoles
) on $left.TargetSid == $right.AccountSID
| where SubjectUserSid != TargetSid
// Add historical baseline
| join kind=leftouter (
    SecurityEvent
    | where TimeGenerated > ago(360d)
    | where EventID == "4724"
    | summarize PasswordChanges=count() by TargetSid, bin(TimeGenerated, 360d)
) on TargetSid
// Calculate base risk score
| extend RiskScore = case(
    Hour in (0,1,2,3,4,5,23), 40,
    WorkstationName !contains SubjectDomainName, 30,
    PasswordChanges > 2, 20,
    0)
// Add sign-in context
| join kind=leftouter (
    SigninLogs
    | where TimeGenerated > ago(360d)
    | summarize 
        DistinctLocations=dcount(Location), 
        DistinctIPs=dcount(IPAddress),
        FailedSignIns=countif(ResultType in ("50126", "50053"))
        by UserPrincipalName
) on $left.AccountUPN == $right.UserPrincipalName
// Add suspicious events
| join kind=leftouter (
    SecurityEvent
    | where TimeGenerated > ago(360d)
    | where EventID in ("4625", "4648", "4688")
    | summarize SuspiciousEvents=count() by bin(TimeGenerated, 1h), TargetAccount
) on TargetAccount
// Calculate final risk score
| extend FinalRiskScore = RiskScore + 
    iff(DistinctLocations > 3, 20, 0) +
    iff(FailedSignIns > 5, 30, 0) +
    iff(isnotempty(SuspiciousEvents), 20, 0)
// Determine Severity based on Risk Score
| extend Severity = case(
    FinalRiskScore >= 80, "High",
    FinalRiskScore >= 50, "Medium",
    "Low"
)
// Final output
| project
    TimeGenerated,
    Activity,
    ['Actor']=SubjectAccount,
    ['Target UPN']=AccountUPN,
    ['Target Account']=TargetAccount,
    ['Privileged Roles']=AssignedRoles,
    ['Workstation']=WorkstationName,
    ['Risk Score']=FinalRiskScore,
    Severity,
    ['Suspicious Events']=SuspiciousEvents,
    ['Recent Failed Logins']=FailedSignIns,
    ['Distinct Login Locations']=DistinctLocations,
    ['Historical Weekly Password Changes']=PasswordChanges
| sort by ['Risk Score'] desc