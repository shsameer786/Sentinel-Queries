//************************************************************************************************
// Title: Advanced SMB Share Discovery and Data Exfiltration Detection
// Purpose: Detection of file share discovery, sensitive data access, and potential data exfiltration via SMB 
// Author: Sameer P Sheik
// Reference: https://www.dionach.com/blog/discovering-sensitive-information-in-file-shares/
//************************************************************************************************
// MITRE ATT&CK Mapping:
// Primary Techniques:
// - T1039 - Data from Network Shared Drive
// - T1083 - File and Directory Discovery
// - T1069 - Permission Groups Discovery
// Secondary Techniques:
// - T1046 - Network Service Scanning
// - T1005 - Data from Local System
//************************************************************************************************

// Configuration Tables
let BackupServiceAccounts = dynamic(['backup_svc', 'system_backup', 'backup_admin']);
let DeploymentServers = dynamic(['deploy01', 'deploy02', 'sccm01']);
let SensitivePatterns = dynamic([
    "password", "secret", "confidential", "credential", 
    "key", "token", "ssh_key", "id_rsa", "wallet", ".kdbx"
]);

// Base exclusion filter
let ExclusionFilter = (T:(IpAddress:string)) {
    T
    | where IpAddress != "-" 
        and IpAddress != ""
        and IpAddress !startswith "fe80"
        and Account !in (BackupServiceAccounts)
        and not(Computer in (DeploymentServers))
};

// 1. SMB File Access Frequency Analysis - High Severity
let HighVolumeAccess = 
SecurityEvent
| where EventID in (5140, 5145)  // SMB share access events
| invoke ExclusionFilter()
| summarize 
    file_access_count = count(),
    unique_shares = dcount(ShareName),
    unique_files = dcount(RelativeTargetName),
    first_access = min(TimeGenerated),
    last_access = max(TimeGenerated)
    by IpAddress, Account
| extend 
    time_span = datetime_diff('hour', last_access, first_access),
    access_rate = iff(time_span > 0, file_access_count * 1.0 / time_span, file_access_count),
    BaseThreshold = 100,
    RiskScore = case(
        file_access_count > 2000 and unique_shares > 5, 90,
        file_access_count > 1000, 75,
        file_access_count > 500, 60,
        50
    ),
    Severity = case(
        RiskScore >= 90, "Critical",
        RiskScore >= 75, "High",
        RiskScore >= 60, "Medium",
        "Low"
    ),
    TTPs = pack_array("T1039.001", "T1083"),
    AlertName = "High Volume SMB File Access",
    DetectionSource = "Custom Analytics",
    ValidatedAgainst = "Microsoft Defender ATP, Azure Security Center"
| where file_access_count > BaseThreshold
| project
    TimeGenerated = last_access,
    IpAddress,
    Account, 
    file_access_count,
    unique_shares,
    unique_files,
    access_rate,
    time_span,
    RiskScore,
    Severity,
    TTPs,
    AlertName,
    DetectionSource,
    ValidatedAgainst
| sort by file_access_count desc, tostring(TimeGenerated) desc;

// 2. Sensitive File Access Detection - High Severity
let SensitiveFileAccess =
SecurityEvent
| where EventID == 5145
| where ShareName != "IPC$"
| where RelativeTargetName has_any (SensitivePatterns)
| extend 
    FileExtension = tostring(extract("\\.[^.]*$", 0, RelativeTargetName)),
    RiskScore = case(
        RelativeTargetName has_any ("id_rsa", "ssh_key"), 95,
        RelativeTargetName has_any ("password", "secret"), 85,
        RelativeTargetName has_any ("confidential", "credential"), 80,
        70
    ),
    Severity = case(
        RiskScore >= 90, "Critical",
        RiskScore >= 80, "High",
        "Medium"
    ),
    TTPs = pack_array("T1039.002", "T1005"),
    AlertName = "Sensitive File Access via SMB",
    DetectionSource = "Custom Analytics",
    ValidatedAgainst = "Sentinel UEBA"
| summarize 
    access_count = count(),
    files_accessed = make_set(RelativeTargetName, 100),
    file_extensions = make_set(FileExtension),
    first_access = min(TimeGenerated),
    last_access = max(TimeGenerated)
    by IpAddress, Account, ShareName, RiskScore, Severity, TTPs, AlertName, DetectionSource, ValidatedAgainst
| extend time_span = datetime_diff('minute', last_access, first_access)
| sort by access_count desc, tostring(last_access) desc;

// 3. Share Access Pattern Analysis - Medium to High Severity
let SharePatternAnalysis =
SecurityEvent
| where EventID in (5140, 5145)
| invoke ExclusionFilter()
| summarize 
    total_accesses = count(),
    unique_accounts = dcount(Account),
    unique_ips = dcount(IpAddress),
    access_types = make_set(AccessMask),
    first_access = min(TimeGenerated),
    last_access = max(TimeGenerated)
    by ShareName, Computer
| extend 
    time_span = datetime_diff('hour', last_access, first_access),
    access_rate = iff(time_span > 0, total_accesses * 1.0 / time_span, total_accesses),
    avg_access_rate = avgif(access_rate, access_rate > 0),
    BaselineDeviation = abs(access_rate - avg_access_rate),
    RiskScore = case(
        BaselineDeviation > 2*sqrt(avg_access_rate), 90,
        BaselineDeviation > sqrt(avg_access_rate), 70,
        50
    ),
    Severity = case(
        RiskScore >= 90, "High",
        RiskScore >= 70, "Medium",
        "Low"
    ),
    TTPs = pack_array("T1039", "T1069"),
    AlertName = "Abnormal Share Access Pattern",
    DetectionSource = "Custom Analytics",
    ValidatedAgainst = "Azure Security Center, Sentinel UEBA"
| sort by total_accesses desc, tostring(last_access) desc;

// 4. Abnormal Access Pattern Detection - Medium to High Severity
let AbnormalPatterns =
SecurityEvent
| where EventID in (5140, 5145)
| invoke ExclusionFilter()
| summarize 
    hourly_count = count(),
    unique_accounts = dcount(Account),
    unique_ips = dcount(IpAddress)
    by bin(TimeGenerated, 1h), ShareName
| order by TimeGenerated asc
| extend 
    avg_hourly = avgif(hourly_count, hourly_count > 0),
    deviation = abs(hourly_count - avg_hourly),
    RiskScore = case(
        deviation > 3*sqrt(avg_hourly), 85,
        deviation > 2*sqrt(avg_hourly), 70,
        50
    ),
    Severity = case(
        RiskScore >= 85, "High",
        RiskScore >= 70, "Medium",
        "Low"
    ),
    TTPs = pack_array("T1039", "T1046"),
    AlertName = "Anomalous Share Access Pattern",
    DetectionSource = "Custom Analytics",
    ValidatedAgainst = "Microsoft Defender ATP"
| project
    TimeGenerated,
    ShareName,
    hourly_count,
    unique_accounts,
    unique_ips,
    deviation,
    RiskScore,
    Severity,
    TTPs,
    AlertName,
    DetectionSource,
    ValidatedAgainst
| sort by hourly_count desc;

// Union all detections for comprehensive view
union 
    HighVolumeAccess,
    SensitiveFileAccess,
    SharePatternAnalysis,
    AbnormalPatterns
| project
    TimeGenerated,
    AlertName,
    Severity,
    RiskScore,
    TTPs,
    DetectionSource,
    ValidatedAgainst,
    *
| sort by RiskScore desc, TimeGenerated desc

//************************************************************************************************
// False Positive Scenarios:
// - Backup operations causing high volume access
// - Software deployment or updates via shares
// - Legitimate mass file operations by admin accounts
// - Regular automated processes accessing network shares
//************************************************************************************************
// Tuning Requirements:
// 1. Adjust RiskScore thresholds based on environment baseline
// 2. Update BackupServiceAccounts and DeploymentServers lists
// 3. Modify SensitivePatterns based on organization nomenclature
// 4. Fine-tune BaselineDeviation calculations based on historical data
// 5. Review and adjust ValidatedAgainst sources based on security stack
//************************************************************************************************
// Integration Notes:
// - Correlate with Azure AD sign-in events for additional context
// - Consider implementing outlier detection for access_rate
// - Add asset criticality scoring to RiskScore calculation
// - Implement incident response playbooks for High/Critical alerts
//************************************************************************************************